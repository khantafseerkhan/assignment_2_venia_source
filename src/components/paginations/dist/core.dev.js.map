{"version":3,"sources":["core.js"],"names":["DOTS","range","start","end","length","Array","from","_","idx","usePagination","totalCount","pageSize","siblingCount","currentPage","paginationRange","totalPageCount","Math","ceil","totalPageNumbers","leftSiblingIndex","max","rightSiblingIndex","min","shouldShowLeftDots","shouldShowRightDots","firstPageIndex","lastPageIndex","leftItemCount","leftRange","rightItemCount","rightRange","middleRange"],"mappings":";;;;;;;;;AAAA;;;;;;;;;;;;;;AAGO,IAAMA,IAAI,GAAG,KAAb;;;AAEP,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAACC,KAAD,EAAQC,GAAR,EAAgB;AAC5B,MAAIC,MAAM,GAAGD,GAAG,GAAGD,KAAN,GAAc,CAA3B;AACA,SAAOG,KAAK,CAACC,IAAN,CAAW;AAAEF,IAAAA,MAAM,EAANA;AAAF,GAAX,EAAuB,UAACG,CAAD,EAAIC,GAAJ;AAAA,WAAYA,GAAG,GAAGN,KAAlB;AAAA,GAAvB,CAAP;AACD,CAHD;;AAKO,IAAMO,aAAa,GAAG,SAAhBA,aAAgB,OAKvB;AAAA,MAJJC,UAII,QAJJA,UAII;AAAA,MAHJC,QAGI,QAHJA,QAGI;AAAA,+BAFJC,YAEI;AAAA,MAFJA,YAEI,kCAFW,CAEX;AAAA,MADJC,WACI,QADJA,WACI;AACJ,MAAMC,eAAe,GAAG,oBAAQ,YAAM;AACpC,QAAMC,cAAc,GAAGC,IAAI,CAACC,IAAL,CAAUP,UAAU,GAAGC,QAAvB,CAAvB,CADoC,CAGpC;;AACA,QAAMO,gBAAgB,GAAGN,YAAY,GAAG,CAAxC;AAEA;;;;;AAIA,QAAIM,gBAAgB,IAAIH,cAAxB,EAAwC;AACtC,aAAOd,KAAK,CAAC,CAAD,EAAIc,cAAJ,CAAZ;AACD;;AAED,QAAMI,gBAAgB,GAAGH,IAAI,CAACI,GAAL,CAASP,WAAW,GAAGD,YAAvB,EAAqC,CAArC,CAAzB;AACA,QAAMS,iBAAiB,GAAGL,IAAI,CAACM,GAAL,CACxBT,WAAW,GAAGD,YADU,EAExBG,cAFwB,CAA1B;AAKA;;;;;;AAKA,QAAMQ,kBAAkB,GAAGJ,gBAAgB,GAAG,CAA9C;AACA,QAAMK,mBAAmB,GAAGH,iBAAiB,GAAGN,cAAc,GAAG,CAAjE;AAEA,QAAMU,cAAc,GAAG,CAAvB;AACA,QAAMC,aAAa,GAAGX,cAAtB;;AAEA,QAAI,CAACQ,kBAAD,IAAuBC,mBAA3B,EAAgD;AAC9C,UAAIG,aAAa,GAAG,IAAI,IAAIf,YAA5B;AACA,UAAIgB,SAAS,GAAG3B,KAAK,CAAC,CAAD,EAAI0B,aAAJ,CAArB;AAEA,0CAAWC,SAAX,IAAsB5B,IAAtB,EAA4Be,cAA5B;AACD;;AAED,QAAIQ,kBAAkB,IAAI,CAACC,mBAA3B,EAAgD;AAC9C,UAAIK,cAAc,GAAG,IAAI,IAAIjB,YAA7B;AACA,UAAIkB,UAAU,GAAG7B,KAAK,CACpBc,cAAc,GAAGc,cAAjB,GAAkC,CADd,EAEpBd,cAFoB,CAAtB;AAIA,cAAQU,cAAR,EAAwBzB,IAAxB,4BAAiC8B,UAAjC;AACD;;AAED,QAAIP,kBAAkB,IAAIC,mBAA1B,EAA+C;AAC7C,UAAIO,WAAW,GAAG9B,KAAK,CAACkB,gBAAD,EAAmBE,iBAAnB,CAAvB;AACA,cAAQI,cAAR,EAAwBzB,IAAxB,4BAAiC+B,WAAjC,IAA8C/B,IAA9C,EAAoD0B,aAApD;AACD;AACF,GAnDuB,EAmDrB,CAAChB,UAAD,EAAaC,QAAb,EAAuBC,YAAvB,EAAqCC,WAArC,CAnDqB,CAAxB;AAqDA,SAAOC,eAAP;AACD,CA5DM","sourcesContent":["import React from 'react';\r\nimport { useMemo } from 'react';\r\n\r\nexport const DOTS = '...';\r\n\r\nconst range = (start, end) => {\r\n  let length = end - start + 1;\r\n  return Array.from({ length }, (_, idx) => idx + start);\r\n};\r\n\r\nexport const usePagination = ({\r\n  totalCount,\r\n  pageSize,\r\n  siblingCount = 1,\r\n  currentPage\r\n}) => {\r\n  const paginationRange = useMemo(() => {\r\n    const totalPageCount = Math.ceil(totalCount / pageSize);\r\n\r\n    // Pages count is determined as siblingCount + firstPage + lastPage + currentPage + 2*DOTS\r\n    const totalPageNumbers = siblingCount + 5;\r\n\r\n    /*\r\n      If the number of pages is less than the page numbers we want to show in our\r\n      paginationComponent, we return the range [1..totalPageCount]\r\n    */\r\n    if (totalPageNumbers >= totalPageCount) {\r\n      return range(1, totalPageCount);\r\n    }\r\n\r\n    const leftSiblingIndex = Math.max(currentPage - siblingCount, 1);\r\n    const rightSiblingIndex = Math.min(\r\n      currentPage + siblingCount,\r\n      totalPageCount\r\n    );\r\n\r\n    /*\r\n      We do not want to show dots if there is only one position left \r\n      after/before the left/right page count as that would lead to a change if our Pagination\r\n      component size which we do not want\r\n    */\r\n    const shouldShowLeftDots = leftSiblingIndex > 2;\r\n    const shouldShowRightDots = rightSiblingIndex < totalPageCount - 2;\r\n\r\n    const firstPageIndex = 1;\r\n    const lastPageIndex = totalPageCount;\r\n\r\n    if (!shouldShowLeftDots && shouldShowRightDots) {\r\n      let leftItemCount = 3 + 2 * siblingCount;\r\n      let leftRange = range(1, leftItemCount);\r\n\r\n      return [...leftRange, DOTS, totalPageCount];\r\n    }\r\n\r\n    if (shouldShowLeftDots && !shouldShowRightDots) {\r\n      let rightItemCount = 3 + 2 * siblingCount;\r\n      let rightRange = range(\r\n        totalPageCount - rightItemCount + 1,\r\n        totalPageCount\r\n      );\r\n      return [firstPageIndex, DOTS, ...rightRange];\r\n    }\r\n\r\n    if (shouldShowLeftDots && shouldShowRightDots) {\r\n      let middleRange = range(leftSiblingIndex, rightSiblingIndex);\r\n      return [firstPageIndex, DOTS, ...middleRange, DOTS, lastPageIndex];\r\n    }\r\n  }, [totalCount, pageSize, siblingCount, currentPage]);\r\n\r\n  return paginationRange;\r\n};"],"file":"core.dev.js"}